// <auto-generated />
using System;
using CongestionTax.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionTax.DataAccess.Migrations
{
    [DbContext(typeof(CongestionTaxDbContext))]
    partial class CongestionTaxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CongestionTax.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1001,
                            Name = "Gothenburg"
                        });
                });

            modelBuilder.Entity("CongestionTax.Domain.Entities.PublicHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PublicHolidays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2013, 1, 1)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2013, 3, 29)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2013, 4, 1)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2013, 5, 1)
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2013, 5, 9)
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2013, 6, 6)
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(2013, 6, 21)
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(2013, 11, 1)
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(2013, 12, 25)
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(2013, 12, 26)
                        });
                });

            modelBuilder.Entity("CongestionTax.Domain.Entities.TimelyTollFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityCode")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("Fee")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TimelyTollFees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityCode = 1001,
                            EndTime = new TimeOnly(5, 59, 0),
                            Fee = 0,
                            StartTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CityCode = 1001,
                            EndTime = new TimeOnly(6, 29, 0),
                            Fee = 8,
                            StartTime = new TimeOnly(6, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CityCode = 1001,
                            EndTime = new TimeOnly(6, 59, 0),
                            Fee = 13,
                            StartTime = new TimeOnly(6, 30, 0)
                        },
                        new
                        {
                            Id = 4,
                            CityCode = 1001,
                            EndTime = new TimeOnly(7, 59, 0),
                            Fee = 18,
                            StartTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CityCode = 1001,
                            EndTime = new TimeOnly(8, 29, 0),
                            Fee = 13,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CityCode = 1001,
                            EndTime = new TimeOnly(14, 59, 0),
                            Fee = 8,
                            StartTime = new TimeOnly(8, 30, 0)
                        },
                        new
                        {
                            Id = 7,
                            CityCode = 1001,
                            EndTime = new TimeOnly(15, 29, 0),
                            Fee = 13,
                            StartTime = new TimeOnly(15, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CityCode = 1001,
                            EndTime = new TimeOnly(16, 59, 0),
                            Fee = 18,
                            StartTime = new TimeOnly(15, 30, 0)
                        },
                        new
                        {
                            Id = 9,
                            CityCode = 1001,
                            EndTime = new TimeOnly(17, 59, 0),
                            Fee = 13,
                            StartTime = new TimeOnly(17, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            CityCode = 1001,
                            EndTime = new TimeOnly(18, 29, 0),
                            Fee = 8,
                            StartTime = new TimeOnly(18, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            CityCode = 1001,
                            EndTime = new TimeOnly(23, 59, 0),
                            Fee = 0,
                            StartTime = new TimeOnly(18, 30, 0)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
